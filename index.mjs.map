{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport betaln from '@stdlib/math-base-special-betaln' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport log1p from '@stdlib/math-base-special-log1p' ;\nimport exp from '@stdlib/math-base-special-exp' ;\nimport ln from '@stdlib/math-base-special-ln' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Evaluates the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated PDF\n*\n* @example\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = pdf( 0.5, 2.0, 4.0 );\n* // returns 1.25\n*\n* @example\n* var y = pdf( 0.2, 2.0, 2.0 );\n* // returns ~0.96\n*\n* @example\n* var y = pdf( 0.8, 4.0, 4.0 );\n* // returns ~0.573\n*\n* @example\n* var y = pdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pdf( 0.5, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = pdf( 0.5, 1.0, NaN );\n* // returns NaN\n*/\nfunction pdf( x, alpha, beta ) {\n\tvar out;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 || x > 1.0 ) {\n\t\t// Support of the Beta distribution: [0,1]\n\t\treturn 0.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( alpha < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( alpha > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn beta;\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( beta < 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tif ( beta > 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn alpha;\n\t}\n\tout = ( alpha-1.0 ) * ln( x );\n\tout += ( beta-1.0 ) * log1p( -x );\n\tout -= betaln( alpha, beta );\n\treturn exp( out );\n}\n\n\n// EXPORTS //\n\nexport default pdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport betaln from '@stdlib/math-base-special-betaln' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport log1p from '@stdlib/math-base-special-log1p' ;\nimport exp from '@stdlib/math-base-special-exp' ;\nimport ln from '@stdlib/math-base-special-ln' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} PDF\n*\n* @example\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.796\n*\n* y = pdf( 0.3 );\n* // returns ~0.695\n*/\nfunction factory( alpha, beta ) {\n\tvar betalnAB;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetalnAB = betaln( alpha, beta );\n\treturn pdf;\n\n\t/**\n\t* Evaluates the probability density function (PDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PDF\n\t*\n\t* @example\n\t* var y = pdf( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction pdf( x ) {\n\t\tvar out;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 || x > 1.0 ) {\n\t\t\t// Support of the Beta distribution: [0,1]\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\tif ( alpha < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( alpha > 1.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn beta;\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\tif ( beta < 1.0 ) {\n\t\t\t\treturn PINF;\n\t\t\t}\n\t\t\tif ( beta > 1.0 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn alpha;\n\t\t}\n\t\tout = -betalnAB;\n\t\tout += ( alpha-1.0 ) * ln( x );\n\t\tout += ( beta-1.0 ) * log1p( -x );\n\t\treturn exp( out );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the probability density function (PDF) for a beta distribution.\n*\n* @module @stdlib/stats-base-dists-beta-pdf\n*\n* @example\n* import pdf from '@stdlib/stats-base-dists-beta-pdf' ;\n*\n* var y = pdf( 0.5, 1.0, 1.0 );\n* // returns 1.0\n*\n* y = pdf( 0.5, 2.0, 4.0 );\n* // returns 1.25\n*\n* @example\n* import { factory as factory } from '@stdlib/stats-base-dists-beta-pdf' ;\n*\n* var pdf = factory( 0.5, 0.5 );\n*\n* var y = pdf( 0.8 );\n* // returns ~0.796\n*\n* y = pdf( 0.3 );\n* // returns ~0.695\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["pdf","x","alpha","beta","out","isnan","NaN","PINF","ln","log1p","betaln","exp","factory","betalnAB","constantFunction","setReadOnly","main"],"mappings":";;gvBAoFA,SAASA,EAAKC,EAAGC,EAAOC,GACvB,IAAIC,EACJ,OACCC,EAAOJ,IACPI,EAAOH,IACPG,EAAOF,IACPD,GAAS,GACTC,GAAQ,EAEDG,IAEHL,EAAI,GAAOA,EAAI,EAEZ,EAEG,IAANA,EACCC,EAAQ,EACLK,EAEHL,EAAQ,EACL,EAEDC,EAEG,IAANF,EACCE,EAAO,EACJI,EAEHJ,EAAO,EACJ,EAEDD,GAERE,GAAQF,EAAM,GAAQM,EAAIP,GAC1BG,IAASD,EAAK,GAAQM,GAAQR,GAC9BG,GAAOM,EAAQR,EAAOC,GACfQ,EAAKP,GACb,CCxEA,SAASQ,EAASV,EAAOC,GACxB,IAAIU,EACJ,OACCR,EAAOH,IACPG,EAAOF,IACPD,GAAS,GACTC,GAAQ,EAEDW,EAAkBR,MAE1BO,EAAWH,EAAQR,EAAOC,GAc1B,SAAcF,GACb,IAAIG,EACJ,GAAKC,EAAOJ,GACX,OAAOK,IAER,GAAKL,EAAI,GAAOA,EAAI,EAEnB,OAAO,EAER,GAAW,IAANA,EACJ,OAAKC,EAAQ,EACLK,EAEHL,EAAQ,EACL,EAEDC,EAER,GAAW,IAANF,EACJ,OAAKE,EAAO,EACJI,EAEHJ,EAAO,EACJ,EAEDD,EAKR,OAHAE,GAAOS,EACPT,IAASF,EAAM,GAAQM,EAAIP,GAC3BG,IAASD,EAAK,GAAQM,GAAQR,GACvBU,EAAKP,EACZ,EACF,CClDAW,EAAAC,EAAA,UAAAJ"}